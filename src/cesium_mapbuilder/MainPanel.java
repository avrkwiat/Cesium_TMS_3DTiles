/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cesium_mapbuilder;

import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.TileObserver;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author m.kwiatkowski
 */
public class MainPanel extends javax.swing.JFrame {
    public int scale;
    String TMSxmlFile;
    String tileset3DTilesJSON;
    java.awt.Image mapImage;
    double transformMatrix[][];
    String fileName = "test.glb";
    
    String lastPath="";
    double minXdegrees  ;
    double minX;
    double maxXdegrees;
    double maxX;
        
    double maxY;
    double maxYdegrees;
    double minY;
    double minYdegrees;
    
    double borderBoxX;
    double borderBoxY;
    double borderBoxXdegrees;
    double borderBoxYdegress;
    
    /**
     * Creates new form MainPanel
     */
   
    public MainPanel() {
        
        initComponents();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelPathAndButton = new javax.swing.JPanel();
        jTextFieldPathToBuliderMap = new javax.swing.JTextField();
        jLabelPathToCreated = new javax.swing.JLabel();
        jLabelLinkToGoogle = new javax.swing.JLabel();
        jLabelLinkToGoogle2 = new javax.swing.JLabel();
        jLabelLinkToGoogle3 = new javax.swing.JLabel();
        jPanelFindeTile = new javax.swing.JPanel();
        jPanelLatLng = new javax.swing.JPanel();
        jSpinnerTileLatY = new javax.swing.JSpinner();
        jLabelTileLatX = new javax.swing.JLabel();
        jLabelTileLngY = new javax.swing.JLabel();
        jSpinnerTileLngX = new javax.swing.JSpinner();
        jRadioButtonTile = new javax.swing.JRadioButton();
        jPanelLatLngDeegrees = new javax.swing.JPanel();
        jSpinnerLatitute = new javax.swing.JSpinner();
        jLabelLat = new javax.swing.JLabel();
        jLabelTng = new javax.swing.JLabel();
        jSpinnerLongditute = new javax.swing.JSpinner();
        jRadioButtonDegrees = new javax.swing.JRadioButton();
        jSpinnerElipsoidHeight = new javax.swing.JSpinner();
        jLabelTileHeight = new javax.swing.JLabel();
        jComboBoxMap = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jSpinnerBorderBox = new javax.swing.JSpinner();
        jLabelIncreaseBox = new javax.swing.JLabel();
        jCheckBoxShowMap = new javax.swing.JCheckBox();
        jScrollPaneLog = new javax.swing.JScrollPane();
        jTextPaneLOG = new javax.swing.JTextPane();
        jPanelZoomTileSize = new javax.swing.JPanel();
        jSpinnerLODzoom = new javax.swing.JSpinner();
        jLabelTileLatX1 = new javax.swing.JLabel();
        jSpinnerTILE_SIZE = new javax.swing.JSpinner();
        jLabelTileLatX2 = new javax.swing.JLabel();
        jPanelMap = new javax.swing.JPanel();
        jLabelBackgroundImage = new javax.swing.JLabel();
        jPanelLogCheckBox = new javax.swing.JPanel();
        jCheckBoxShowLinkToProvider = new javax.swing.JCheckBox();
        jCheckBoxShowTMS = new javax.swing.JCheckBox();
        jCheckBoxShow3DTiles = new javax.swing.JCheckBox();
        jButtonTMScreated = new javax.swing.JButton();
        jButton3DTilesJSON = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabelModelPosition = new javax.swing.JLabel();
        jLabelModelRotation = new javax.swing.JLabel();
        jLabelModelScale = new javax.swing.JLabel();
        jSpinnerPositionY = new javax.swing.JSpinner();
        jSpinnerPositionZ = new javax.swing.JSpinner();
        jSpinnerRotationX = new javax.swing.JSpinner();
        jSpinnerRotationY = new javax.swing.JSpinner();
        jSpinnerRotationZ = new javax.swing.JSpinner();
        jSpinnerScaleX = new javax.swing.JSpinner();
        jSpinnerPositionX = new javax.swing.JSpinner();
        jSpinnerScaleY = new javax.swing.JSpinner();
        jSpinnerScaleZ = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelModel = new javax.swing.JLabel();
        jCheckBoxNormalizeRotationModel = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabelTilesetJSON = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jSpinnerRegionHeight = new javax.swing.JSpinner();
        jLabelMaxHeight = new javax.swing.JLabel();
        jLabelgeometricError = new javax.swing.JLabel();
        jSpinnerECEFx = new javax.swing.JSpinner();
        jSpinnerGeometricError1 = new javax.swing.JSpinner();
        jLabelECEFx = new javax.swing.JLabel();
        jSpinnerECEFy = new javax.swing.JSpinner();
        jLabelECEFy = new javax.swing.JLabel();
        jLabelMaxHeightECEFz = new javax.swing.JLabel();
        jSpinnerECEFz = new javax.swing.JSpinner();
        jComboBoxRefine = new javax.swing.JComboBox<>();
        jLabelRefine = new javax.swing.JLabel();
        jPanelFileChoser = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("3D Tiles Builder");

        jPanelPathAndButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldPathToBuliderMap.setText("c:/MapBuilder");

        jLabelPathToCreated.setText("Path to created files:");

        jLabelLinkToGoogle.setText("Link google 1");

        jLabelLinkToGoogle2.setText("Link google 2");

        jLabelLinkToGoogle3.setText("Link google 3");

        javax.swing.GroupLayout jPanelPathAndButtonLayout = new javax.swing.GroupLayout(jPanelPathAndButton);
        jPanelPathAndButton.setLayout(jPanelPathAndButtonLayout);
        jPanelPathAndButtonLayout.setHorizontalGroup(
            jPanelPathAndButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPathAndButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPathAndButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPathAndButtonLayout.createSequentialGroup()
                        .addComponent(jLabelPathToCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jTextFieldPathToBuliderMap, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPathAndButtonLayout.createSequentialGroup()
                        .addComponent(jLabelLinkToGoogle, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelLinkToGoogle2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelLinkToGoogle3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPathAndButtonLayout.setVerticalGroup(
            jPanelPathAndButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPathAndButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPathAndButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathToBuliderMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPathToCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPathAndButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLinkToGoogle)
                    .addComponent(jLabelLinkToGoogle2)
                    .addComponent(jLabelLinkToGoogle3))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanelFindeTile.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanelLatLng.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSpinnerTileLatY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerTileLatYStateChanged(evt);
            }
        });

        jLabelTileLatX.setText("Tile Lat (Y):");

        jLabelTileLngY.setText("Tile Lng (X):");

        jSpinnerTileLngX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerTileLngXStateChanged(evt);
            }
        });

        jRadioButtonTile.setSelected(true);
        jRadioButtonTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTileActionPerformed(evt);
            }
        });

        jPanelLatLngDeegrees.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSpinnerLatitute.setModel(new javax.swing.SpinnerNumberModel(0.0d, -85.0d, 85.0d, 0.0d));
        jSpinnerLatitute.setEnabled(false);
        jSpinnerLatitute.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLatituteStateChanged(evt);
            }
        });

        jLabelLat.setText("Latitude:");

        jLabelTng.setText("Longtitude:");

        jSpinnerLongditute.setToolTipText("");
        jSpinnerLongditute.setEnabled(false);
        jSpinnerLongditute.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLongdituteStateChanged(evt);
            }
        });

        jRadioButtonDegrees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDegreesActionPerformed(evt);
            }
        });

        jSpinnerElipsoidHeight.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerElipsoidHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerElipsoidHeightStateChanged(evt);
            }
        });

        jLabelTileHeight.setText("Height (Z):");

        jComboBoxMap.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Open Street", "GoogleMaps", "Google Satellite", "Google Satellite Hybrid", "Google Terrain", "Google Roads" }));
        jComboBoxMap.setSelectedIndex(1);
        jComboBoxMap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxMapItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelLatLngDeegreesLayout = new javax.swing.GroupLayout(jPanelLatLngDeegrees);
        jPanelLatLngDeegrees.setLayout(jPanelLatLngDeegreesLayout);
        jPanelLatLngDeegreesLayout.setHorizontalGroup(
            jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                        .addComponent(jRadioButtonDegrees)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTng, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerLongditute, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerLatitute)
                            .addComponent(jLabelLat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLatLngDeegreesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTileHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                                .addComponent(jSpinnerElipsoidHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxMap, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanelLatLngDeegreesLayout.setVerticalGroup(
            jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                        .addComponent(jLabelTng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerLongditute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLatLngDeegreesLayout.createSequentialGroup()
                        .addComponent(jLabelLat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerLatitute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRadioButtonDegrees, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTileHeight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLatLngDeegreesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerElipsoidHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSpinnerBorderBox.setModel(new javax.swing.SpinnerNumberModel(10, -50, 50, 1));
        jSpinnerBorderBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerBorderBoxStateChanged(evt);
            }
        });

        jLabelIncreaseBox.setText("Increase region Box %:");

        jCheckBoxShowMap.setText("Show Map");
        jCheckBoxShowMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinnerBorderBox)
                    .addComponent(jLabelIncreaseBox))
                .addGap(29, 29, 29)
                .addComponent(jCheckBoxShowMap)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelIncreaseBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerBorderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxShowMap))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelLatLngLayout = new javax.swing.GroupLayout(jPanelLatLng);
        jPanelLatLng.setLayout(jPanelLatLngLayout);
        jPanelLatLngLayout.setHorizontalGroup(
            jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLatLngLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelLatLngLayout.createSequentialGroup()
                        .addComponent(jRadioButtonTile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTileLngY, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerTileLngX, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerTileLatY)
                            .addComponent(jLabelTileLatX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanelLatLngDeegrees, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelLatLngLayout.setVerticalGroup(
            jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLatLngLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLatLngLayout.createSequentialGroup()
                        .addComponent(jLabelTileLngY)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLatLngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRadioButtonTile)
                            .addComponent(jSpinnerTileLngX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelLatLngLayout.createSequentialGroup()
                        .addComponent(jLabelTileLatX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerTileLatY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanelLatLngDeegrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jScrollPaneLog.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneLog.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPaneLog.setAutoscrolls(true);

        jTextPaneLOG.setMaximumSize(new java.awt.Dimension(543, 543));
        jScrollPaneLog.setViewportView(jTextPaneLOG);

        jPanelZoomTileSize.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSpinnerLODzoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLODzoomStateChanged(evt);
            }
        });
        jSpinnerLODzoom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSpinnerLODzoomPropertyChange(evt);
            }
        });

        jLabelTileLatX1.setText("LOD/Zoom:");

        jSpinnerTILE_SIZE.setEnabled(false);
        jSpinnerTILE_SIZE.setValue(256);

        jLabelTileLatX2.setText("TILE_SIZE");

        javax.swing.GroupLayout jPanelZoomTileSizeLayout = new javax.swing.GroupLayout(jPanelZoomTileSize);
        jPanelZoomTileSize.setLayout(jPanelZoomTileSizeLayout);
        jPanelZoomTileSizeLayout.setHorizontalGroup(
            jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelZoomTileSizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelZoomTileSizeLayout.createSequentialGroup()
                        .addComponent(jLabelTileLatX1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSpinnerLODzoom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerTILE_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTileLatX2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanelZoomTileSizeLayout.setVerticalGroup(
            jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelZoomTileSizeLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTileLatX1)
                    .addComponent(jLabelTileLatX2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelZoomTileSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerLODzoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerTILE_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelMap.setBackground(new java.awt.Color(0, 0, 0));
        jPanelMap.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelMap.setMaximumSize(new java.awt.Dimension(256, 256));
        jPanelMap.setMinimumSize(new java.awt.Dimension(256, 256));

        jLabelBackgroundImage.setBackground(new java.awt.Color(0, 0, 0));
        jLabelBackgroundImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelMapLayout = new javax.swing.GroupLayout(jPanelMap);
        jPanelMap.setLayout(jPanelMapLayout);
        jPanelMapLayout.setHorizontalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMapLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelBackgroundImage, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanelMapLayout.setVerticalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBackgroundImage, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelLogCheckBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jCheckBoxShowLinkToProvider.setSelected(true);
        jCheckBoxShowLinkToProvider.setText("Show link");
        jCheckBoxShowLinkToProvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowLinkToProviderActionPerformed(evt);
            }
        });

        jCheckBoxShowTMS.setSelected(true);
        jCheckBoxShowTMS.setText("TMS");
        jCheckBoxShowTMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowTMSActionPerformed(evt);
            }
        });

        jCheckBoxShow3DTiles.setSelected(true);
        jCheckBoxShow3DTiles.setText("3D Tiles");
        jCheckBoxShow3DTiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShow3DTilesActionPerformed(evt);
            }
        });

        jButtonTMScreated.setText("create TMS - XML");
        jButtonTMScreated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTMScreatedActionPerformed(evt);
            }
        });

        jButton3DTilesJSON.setText("create 3DTiles - JSON");
        jButton3DTilesJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3DTilesJSONActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLogCheckBoxLayout = new javax.swing.GroupLayout(jPanelLogCheckBox);
        jPanelLogCheckBox.setLayout(jPanelLogCheckBoxLayout);
        jPanelLogCheckBoxLayout.setHorizontalGroup(
            jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLogCheckBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxShow3DTiles)
                    .addGroup(jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanelLogCheckBoxLayout.createSequentialGroup()
                            .addComponent(jCheckBoxShowLinkToProvider)
                            .addGap(37, 37, 37)
                            .addComponent(jButtonTMScreated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelLogCheckBoxLayout.createSequentialGroup()
                            .addComponent(jCheckBoxShowTMS)
                            .addGap(65, 65, 65)
                            .addComponent(jButton3DTilesJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLogCheckBoxLayout.setVerticalGroup(
            jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLogCheckBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxShowLinkToProvider)
                    .addComponent(jButtonTMScreated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLogCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxShowTMS)
                    .addComponent(jButton3DTilesJSON))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxShow3DTiles)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelModelPosition.setText("Position [m]");

        jLabelModelRotation.setText("Rotation [°]");

        jLabelModelScale.setText("Scale");

        jSpinnerPositionY.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerPositionY.setEnabled(false);
        jSpinnerPositionY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerPositionYStateChanged(evt);
            }
        });

        jSpinnerPositionZ.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerPositionZ.setEnabled(false);
        jSpinnerPositionZ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerPositionZStateChanged(evt);
            }
        });

        jSpinnerRotationX.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerRotationX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRotationXStateChanged(evt);
            }
        });

        jSpinnerRotationY.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerRotationY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRotationYStateChanged(evt);
            }
        });

        jSpinnerRotationZ.setModel(new javax.swing.SpinnerNumberModel(-90.0d, null, null, 1.0d));
        jSpinnerRotationZ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRotationZStateChanged(evt);
            }
        });

        jSpinnerScaleX.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 1.0d));
        jSpinnerScaleX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScaleXStateChanged(evt);
            }
        });

        jSpinnerPositionX.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinnerPositionX.setEnabled(false);
        jSpinnerPositionX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerPositionXStateChanged(evt);
            }
        });

        jSpinnerScaleY.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 1.0d));
        jSpinnerScaleY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScaleYStateChanged(evt);
            }
        });

        jSpinnerScaleZ.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 1.0d));
        jSpinnerScaleZ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScaleZStateChanged(evt);
            }
        });

        jLabel2.setText("Z");

        jLabel4.setText("Y");

        jLabel3.setText("X");

        jLabelModel.setText("Model");

        jCheckBoxNormalizeRotationModel.setSelected(true);
        jCheckBoxNormalizeRotationModel.setText("Normalize rotation model to Earth");
        jCheckBoxNormalizeRotationModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNormalizeRotationModelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelModelRotation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelModelScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerScaleX)
                                    .addComponent(jSpinnerRotationX)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabelModel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabelModelPosition)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerPositionX, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerRotationY)
                            .addComponent(jSpinnerScaleY)
                            .addComponent(jSpinnerPositionY, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerPositionZ, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(jSpinnerRotationZ)
                            .addComponent(jSpinnerScaleZ))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBoxNormalizeRotationModel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelModel)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelModelPosition)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinnerPositionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinnerPositionZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinnerPositionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelModelRotation)
                    .addComponent(jSpinnerRotationX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerRotationY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerRotationZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelModelScale)
                    .addComponent(jSpinnerScaleX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerScaleY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerScaleZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxNormalizeRotationModel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelTilesetJSON.setBackground(new java.awt.Color(204, 204, 204));
        jLabelTilesetJSON.setText("Tileset JSON");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelTilesetJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelTilesetJSON, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSpinnerRegionHeight.setModel(new javax.swing.SpinnerNumberModel(25000000, null, null, 1));
        jSpinnerRegionHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRegionHeightStateChanged(evt);
            }
        });

        jLabelMaxHeight.setText("Region Height");

        jLabelgeometricError.setText("GeometricError:");

        jSpinnerECEFx.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.1d));
        jSpinnerECEFx.setEnabled(false);

        jSpinnerGeometricError1.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 0.1d));
        jSpinnerGeometricError1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerGeometricError1StateChanged(evt);
            }
        });

        jLabelECEFx.setText("ECEF X:");

        jSpinnerECEFy.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.1d));
        jSpinnerECEFy.setEnabled(false);

        jLabelECEFy.setText("ECEF Y:");

        jLabelMaxHeightECEFz.setText("ECEF Z:");

        jSpinnerECEFz.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.1d));
        jSpinnerECEFz.setEnabled(false);

        jComboBoxRefine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "REPLACE", "ADD" }));
        jComboBoxRefine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRefineActionPerformed(evt);
            }
        });

        jLabelRefine.setText("Refine:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSpinnerECEFx, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelECEFx, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jSpinnerRegionHeight)
                            .addGap(12, 12, 12)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelMaxHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelgeometricError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jLabelECEFy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinnerECEFy, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerGeometricError1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinnerECEFz)
                    .addComponent(jLabelMaxHeightECEFz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelRefine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxRefine, 0, 134, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelECEFx)
                    .addComponent(jLabelECEFy)
                    .addComponent(jLabelMaxHeightECEFz))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerECEFx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerECEFy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerECEFz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelgeometricError)
                    .addComponent(jLabelMaxHeight)
                    .addComponent(jLabelRefine))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerRegionHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerGeometricError1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRefine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanelFileChoser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Chose Model FIle (glb, b3dm ..)");

        javax.swing.GroupLayout jPanelFileChoserLayout = new javax.swing.GroupLayout(jPanelFileChoser);
        jPanelFileChoser.setLayout(jPanelFileChoserLayout);
        jPanelFileChoserLayout.setHorizontalGroup(
            jPanelFileChoserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFileChoserLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanelFileChoserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelFileChoserLayout.setVerticalGroup(
            jPanelFileChoserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFileChoserLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jFileChooser1.getAccessibleContext().setAccessibleParent(jPanelFileChoser);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelFileChoser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelFileChoser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelFindeTileLayout = new javax.swing.GroupLayout(jPanelFindeTile);
        jPanelFindeTile.setLayout(jPanelFindeTileLayout);
        jPanelFindeTileLayout.setHorizontalGroup(
            jPanelFindeTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFindeTileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFindeTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelLatLng, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelZoomTileSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelLogCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelFindeTileLayout.createSequentialGroup()
                        .addComponent(jPanelMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanelFindeTileLayout.setVerticalGroup(
            jPanelFindeTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFindeTileLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelFindeTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFindeTileLayout.createSequentialGroup()
                        .addComponent(jPanelLogCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelZoomTileSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelLatLng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneLog, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelPathAndButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelFindeTile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelPathAndButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelFindeTile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void goWebsite(JLabel website, String url) {
        website.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().browse(new URI(url));
                } catch (URISyntaxException | IOException ex) {
                    //It looks like there's a problem
                }
            }
        });
    }
    private void startAppContent() throws MalformedURLException{
        
        scale = (int)Math.pow(2, (int)jSpinnerLODzoom.getValue());
        SpinnerModel sm = new SpinnerNumberModel(0, 0, scale-1, 1); //default value,lower bound,upper bound,increment by
        jSpinnerTileLatY.setModel(sm);
        SpinnerModel sm2 = new SpinnerNumberModel(0, 0, scale-1, 1); //default value,lower bound,upper bound,increment by   
        jSpinnerTileLngX.setModel(sm2);
        SpinnerModel sm3 = new SpinnerNumberModel(0, -180, 179, 0.1); //default value,lower bound,upper bound,increment by   
        jSpinnerLongditute.setModel(sm3);
        SpinnerModel sm4 = new SpinnerNumberModel(0, -85, 85, 0.1); //default value,lower bound,upper bound,increment by   
        jSpinnerLatitute.setModel(sm4);
        
        CalculateTiileToDegreeAndRad();
        //jSpinnerMaxHeight.setValue(25000000);
        
        jLabelLinkToGoogle.setText("<html> Link: <a href=\"\">Google Coordinate system</a></html>");
        goWebsite(jLabelLinkToGoogle, "https://developers.google.com/maps/documentation/javascript/examples/map-coordinates");
        jLabelLinkToGoogle2.setText("<html> Link : <a href=\"\">Tile to Long and Lat</a></html>");
        goWebsite(jLabelLinkToGoogle2,"https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames");
        jLabelLinkToGoogle3.setText("<html> Link : <a href=\"\">calculate ECEF</a></html>");
        goWebsite(jLabelLinkToGoogle3,"https://en.wikipedia.org/wiki/Geographic_coordinate_conversion");

    }
    
    private String pathToOnlineMap(){
        String pathToOnlineMap="";
        int selection = jComboBoxMap.getSelectedIndex();
        switch (selection)
        {
            case 0: pathToOnlineMap =  "https://tile.openstreetmap.org/"+jSpinnerLODzoom.getValue()+"/"+jSpinnerTileLngX.getValue()+"/"+jSpinnerTileLatY.getValue()+".png";
            //case 0: pathToOnlineMap =  "https://www.openstreetmap.org/#map="+jSpinnerLODzoom.getValue()+"/"+(double)jSpinnerLongditute.getValue()+"/"+(double)jSpinnerLatitute.getValue()+"&layers=T";
            //case 0: pathToOnlineMap =  "https://tile.openstreetmap.org/1/1/0.png";
            //https://www.openstreetmap.org/#map=10/47.7051/13.5503&layers=T   https://www.openstreetmap.org/?lat=47.777&amp;lon=13.322&amp;zoom=11&amp;layers=B000TTF
                break;
            case 1: pathToOnlineMap =  "https://mt1.google.com/vt/lyrs=r&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue();
                break;
            case 2: pathToOnlineMap =  "http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue();
                break;
            case 3: pathToOnlineMap =  "https://mt1.google.com/vt/lyrs=y&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue();
                break;
            case 4: pathToOnlineMap =  "https://mt1.google.com/vt/lyrs=t&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue();
                break; 
            case 5: pathToOnlineMap =  "https://mt1.google.com/vt/lyrs=h&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue();
                break;    
            default: pathToOnlineMap =  "https://mt1.google.com/vt/lyrs=r&x="+ jSpinnerTileLngX.getValue() +"&y="+jSpinnerTileLatY.getValue()+"&z="+jSpinnerLODzoom.getValue(); 
                break;
        }
        return pathToOnlineMap;
    }
    private void updateMapImage(String pathToOnlineMap) throws MalformedURLException{
        if(jCheckBoxShowMap.isSelected()){
            if(lastPath != pathToOnlineMap){
                URL url = new URL(pathToOnlineMap());
                mapImage = java.awt.Toolkit.getDefaultToolkit().createImage(url); 
                ImageIcon background = new ImageIcon(mapImage);
                jLabelBackgroundImage.setIcon(background);
            }
            lastPath = pathToOnlineMap;
        }

    }
    private void CalculateTiileToDegreeAndRad() throws MalformedURLException{
                
         minXdegrees = ((Double.parseDouble(jSpinnerTileLngX.getValue().toString())/scale)*360)-180 ;
         minX = minXdegrees * Math.PI / 180;
         maxXdegrees = (((Double.parseDouble(jSpinnerTileLngX.getValue().toString())+1)/scale)*360)-180 ;
         maxX = maxXdegrees * Math.PI / 180;
        
         maxY = Math.atan(Math.sinh((1-2*Double.parseDouble(jSpinnerTileLatY.getValue().toString())/scale)*Math.PI));
         maxYdegrees = maxY/Math.PI*180;
         minY = Math.atan(Math.sinh((1-2*(Double.parseDouble(jSpinnerTileLatY.getValue().toString())+1)/scale)*Math.PI));
         minYdegrees = minY/Math.PI*180;
         
         if((int)jSpinnerBorderBox.getValue() != 0){
            borderBoxX = (maxX- minX)/(int)jSpinnerBorderBox.getValue();
            borderBoxY = (maxY- minY)/(int)jSpinnerBorderBox.getValue();
            borderBoxXdegrees = (minYdegrees- minXdegrees)/(int)jSpinnerBorderBox.getValue();
            borderBoxYdegress = (maxYdegrees- minYdegrees)/(int)jSpinnerBorderBox.getValue();
         }else{
            borderBoxX = 0;
            borderBoxY = 0;
            borderBoxXdegrees = 0;
            borderBoxYdegress = 0;
         }

        
        double heighToZoom;
        if((int)jSpinnerLODzoom.getValue()>0){
            heighToZoom =  (int)jSpinnerRegionHeight.getValue()/(int)jSpinnerLODzoom.getValue();
        }else{
            heighToZoom =  (int)jSpinnerRegionHeight.getValue();
        }      
        String tekstLOG = "Tile["+jSpinnerTileLngX.getValue()+","+jSpinnerTileLatY.getValue()+"]"+" Scale: "+scale +
                        "\n------------------------------------------------------------------------------------------------------------";
   
        if(jCheckBoxShowLinkToProvider.isSelected()){
            tekstLOG = tekstLOG +"\n \nTile provider: "+ pathToOnlineMap()+
                    "\nTMS main map: "+jTextFieldPathToBuliderMap.getText()+"/TMS/"+(int)jSpinnerLODzoom.getValue()+"/"+(int)jSpinnerTileLngX.getValue()+"/"+((scale-1)- (int)jSpinnerTileLatY.getValue())+".png"+
                    "\nTMS link UE: "+ "file:///"+jTextFieldPathToBuliderMap.getText()+"/TMS/tilemapresource.xml"+
                    "\n3DTiles link UE: "+ "file:///"+jTextFieldPathToBuliderMap.getText()+"/3DTiles/tileset.json"+
                    "\n------------------------------------------------------------------------------------------------------------";
                    
        }
        
            double[] EPSG3857CellSizeTab = {156543.033928,78271.516964,39135.758482,19567.879241,9783.939621,4891.96981,2445.984905,1222.992453,611.496226,305.748113,152.874057,76.437028,38.218514,19.109257,9.554629,4.777314,2.388657,1.194329,0.597164,0.298582,0.149291,0.074646,0.037323,0.018661,0.009331};
            TMSxmlFile = 
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"+
                    "    <TileMap version=\"1.0.0\" tilemapservice=\"http://tms.osgeo.org/1.0.0\">\n"+
                    "    <Title>ETC.tif</Title>\n"+
                    "    <Abstract></Abstract>\n"+
                    "    <SRS>EPSG:3857</SRS>\n"+       
                    "    <BoundingBox miny=\"" + (minYdegrees-borderBoxYdegress) +"\" minx=\"" +(minXdegrees-borderBoxXdegrees )+ "\" maxy=\"" +(maxYdegrees+borderBoxYdegress )+ "\" maxx=\""+ (maxXdegrees + borderBoxXdegrees)+"\"/>\n"+
                    "    <Origin x=\""+minXdegrees+"\" y=\""+minYdegrees+"\"/>\n"+
                    "    <TileSets profile=\"mercator\">\n"+
                    "       <TileSet href=\""+jSpinnerLODzoom.getValue()+"\" units-per-pixel=\""+EPSG3857CellSizeTab[(int)jSpinnerLODzoom.getValue()]+"\" order=\""+jSpinnerLODzoom.getValue()+"\"/>\n"+
                    "   </TileSets>\n"+
                    "</TileMap>\n"
                    ;
        if(jCheckBoxShowTMS.isSelected()){

            
            tekstLOG = tekstLOG +"\n \nTile Map Service - TMS, tilemapresource.xml: \n"+TMSxmlFile +
                    "\n------------------------------------------------------------------------------------------------------------";
        }
        if(jCheckBoxShow3DTiles.isSelected()){
            String tileset3DTilesJSONChilde="";
            transformMatrix = calculatematrix();
            tileset3DTilesJSONChilde=
                    "           {\n"+
                    "               \"transform\":\n" +
                    "                [\n" +
                    "                   "+transformMatrix[0][0]+","+transformMatrix[0][1]+","+transformMatrix[0][2]+","+transformMatrix[0][3]+",\n" +
                    "                   "+transformMatrix[1][0]+","+transformMatrix[1][1]+","+transformMatrix[1][2]+","+transformMatrix[1][3]+",\n" +
                    "                   "+transformMatrix[2][0]+","+transformMatrix[2][1]+","+transformMatrix[2][2]+","+transformMatrix[2][3]+",\n" +
                    "                   "+(double)jSpinnerECEFx.getValue()+","+(double)jSpinnerECEFy.getValue()+","+(double)jSpinnerECEFz.getValue()+",1\n" +
                    "               ],\n"+
                    "               \"boundingVolume\":\n"+ 
                    "               {\n"+
                    "                   \"region\": [\n"+
                    "                       "+minX+",\n"+
                    "                       "+minY+",\n"+
                    "                       "+maxX+",\n"+
                    "                       "+maxY+",\n"+
                    "                       0"+",\n"+
                    "                       "+heighToZoom/2+"\n"+
                    "                   ]\n"+
                    "               },\n"+
                    "               \"refine\": \""+jComboBoxRefine.getSelectedItem().toString()+"\",\n"+
                    "               \"geometricError\": "+(double)jSpinnerGeometricError1.getValue()/2+",\n" +
                    "               \"content\":{\"uri\":\""+fileName+"\"}\n"+
                    "           }\n"

                    ;
            
            tileset3DTilesJSON = 
                    "{\n"+
                    "   \"asset\": {\n" +
                    "       \"version\": \"1.1\"\n" +
                    "   },\n"+
                    "   \"root\": {\n"+
                    "       \"refine\": \""+jComboBoxRefine.getSelectedItem().toString()+"\",\n"+
                    "       \"geometricError\": "+(double)jSpinnerGeometricError1.getValue()+",\n"+
                    "       \"boundingVolume\":\n"+ 
                    "       {\n"+
                    "           \"region\": [\n"+
                    "               "+minX+",\n"+
                    "               "+minY+",\n"+
                    "               "+maxX+",\n"+
                    "               "+maxY+",\n"+
                    "               0"+",\n"+
                    "               "+heighToZoom+"\n"+
                    "           ]\n"+
                    "       },\n"+
                    "       \"children\": [\n"+
                    tileset3DTilesJSONChilde+
                    "       ]\n"+
                    "   }\n"+
                    "}\n";
            tekstLOG = tekstLOG +"\n \n3D Tiles, Tileset.json \n" + tileset3DTilesJSON;
        }
                
        jTextPaneLOG.setText(tekstLOG);
        

    }
    private void calculateECEF(){
        double a = 6378137;
        double b = 6356752.3142;
        double Nfi;
        Nfi = Math.pow(a, 2)/(Math.sqrt((Math.pow(a, 2) * Math.pow(Math.cos((double)jSpinnerLatitute.getValue()* Math.PI / 180),2))+(Math.pow(b, 2) * Math.pow(Math.sin((double)jSpinnerLatitute.getValue()* Math.PI / 180),2))));
        jSpinnerECEFx.setValue((Nfi + (double)jSpinnerElipsoidHeight.getValue())  * Math.cos((double)jSpinnerLatitute.getValue()* Math.PI / 180) * Math.cos((double)jSpinnerLongditute.getValue()* Math.PI / 180));
        jSpinnerECEFy.setValue((Nfi + (double)jSpinnerElipsoidHeight.getValue())  * Math.cos((double)jSpinnerLatitute.getValue()* Math.PI / 180) * Math.sin((double)jSpinnerLongditute.getValue()* Math.PI / 180));
        jSpinnerECEFz.setValue((((b*b)/(a*a) * Nfi) +(double)jSpinnerElipsoidHeight.getValue() )* Math.sin((double)jSpinnerLatitute.getValue()* Math.PI / 180));
    }
    
    private double multiplyMatricesCell(double[][] firstMatrix, double[][] secondMatrix, int row, int col) {
        double cell = 0;
        for (int i = 0; i < secondMatrix.length; i++) {
            cell += firstMatrix[row][i] * secondMatrix[i][col];
        }
        return cell;
    }
    private double[][] multiplyMatrices(double[][] firstMatrix, double[][] secondMatrix) {
        double[][] result = new double[firstMatrix.length][secondMatrix[0].length];

        for (int row = 0; row < result.length; row++) {
            for (int col = 0; col < result[row].length; col++) {
                result[row][col] = multiplyMatricesCell(firstMatrix, secondMatrix, row, col);
            }
        }
        return result;
    }
    private double[][] calculatematrix(){

        double normalizeRotateteYMatrix[][] = {
            {Math.cos((-1*(90 - (double)jSpinnerLatitute.getValue()))* Math.PI / 180),0,Math.sin((-1*(90 - (double)jSpinnerLatitute.getValue()))* Math.PI / 180),0},
            {0,1,0,0},
            {(-1)*Math.sin((-1*(90 - (double)jSpinnerLatitute.getValue()))* Math.PI / 180),0,Math.cos((-1*(90 - (double)jSpinnerLatitute.getValue()))* Math.PI / 180),0},
            {0,0,0,1}
        };
        double normalizeRotateteZMatrix[][] = {
            {Math.cos((-1)*(double)jSpinnerLongditute.getValue()* Math.PI / 180),(-1)*Math.sin((-1)*(double)jSpinnerLongditute.getValue()* Math.PI / 180),0,0},
            {Math.sin((-1)*(double)jSpinnerLongditute.getValue()* Math.PI / 180),Math.cos((-1)*(double)jSpinnerLongditute.getValue()* Math.PI / 180),0,0},
            {0,0,1,0},
            {0,0,0,1}
        };
        double[][] rotateteXMatrix = {
            {1,0,0,0},
            {0,Math.cos((double)jSpinnerRotationX.getValue()* Math.PI / 180),(-1)*Math.sin((double)jSpinnerRotationX.getValue()* Math.PI / 180),0},
            {0,Math.sin((double)jSpinnerRotationX.getValue()* Math.PI / 180),Math.cos((double)jSpinnerRotationX.getValue()* Math.PI / 180),0},
            {0,0,0,1}
        };
        double rotateteYMatrix[][] = {
            {Math.cos((double)jSpinnerRotationY.getValue()* Math.PI / 180),0,Math.sin((double)jSpinnerRotationY.getValue()* Math.PI / 180),0},
            {0,1,0,0},
            {(-1)*Math.sin((double)jSpinnerRotationY.getValue()* Math.PI / 180),0,Math.cos((double)jSpinnerRotationY.getValue()* Math.PI / 180),0},
            {0,0,0,1}
        };
        double rotateteZMatrix[][] = {
            {Math.cos((double)jSpinnerRotationZ.getValue()* Math.PI / 180),(-1)*Math.sin((double)jSpinnerRotationZ.getValue()* Math.PI / 180),0,0},
            {Math.sin((double)jSpinnerRotationZ.getValue()* Math.PI / 180),Math.cos((double)jSpinnerRotationZ.getValue()* Math.PI / 180),0,0},
            {0,0,1,0},
            {0,0,0,1}
        };
        double scaleMatrix[][] = {
            {(double)jSpinnerScaleX.getValue(),0,0,0},
            {0,(double)jSpinnerScaleY.getValue(),0,0},
            {0,0,(double)jSpinnerScaleZ.getValue(),0},
            {0,0,0,1}
        };
        double translationMatrix[][] = {
            {1,0,0,(double)jSpinnerPositionX.getValue()},
            {0,1,0,(double)jSpinnerPositionY.getValue()},
            {0,0,1,(double)jSpinnerPositionZ.getValue()},
            {0,0,0,1}
        };
        double multipleResultTemp[][] = multiplyMatrices(rotateteYMatrix,rotateteXMatrix); // rotY*rotX
        double multipleResult[][] = multiplyMatrices(multipleResultTemp,rotateteZMatrix); // (rotY*rotX)*rotZ
        multipleResultTemp = multiplyMatrices(translationMatrix,multipleResult); // trans*((rotY*rotX)*rotZ)
        multipleResult = multiplyMatrices(multipleResultTemp,scaleMatrix); // (trans*((rotY*rotX)*rotZ)) * scal
        
        //normalize rotation model to earth
        if(jCheckBoxNormalizeRotationModel.isSelected()){
            multipleResultTemp = multiplyMatrices(multipleResult,normalizeRotateteYMatrix); // ((trans*((rotY*rotX)*rotZ)) * scal) * normalizeY
            multipleResult = multiplyMatrices(multipleResultTemp,normalizeRotateteZMatrix); // ((trans*((rotY*rotX)*rotZ)) * scal) * normalizeY
        }

        
//        String tekstlog =  rotateteXMatrix[0][0]+",  "+rotateteXMatrix[0][1]+",  "+rotateteXMatrix[0][2]+",  "+rotateteXMatrix[0][3]+"\n";
//        tekstlog = tekstlog + rotateteXMatrix[1][0]+",  "+rotateteXMatrix[1][1]+",  "+rotateteXMatrix[1][2]+",  "+rotateteXMatrix[1][3]+"\n";
//        tekstlog = tekstlog + rotateteXMatrix[2][0]+",  "+rotateteXMatrix[2][1]+",  "+rotateteXMatrix[2][2]+",  "+rotateteXMatrix[2][3]+"\n";
//        tekstlog = tekstlog + rotateteXMatrix[3][0]+",  "+rotateteXMatrix[3][1]+",  "+rotateteXMatrix[3][2]+",  "+rotateteXMatrix[3][3]+"\n";

//        String tekstlog =  rotateteYMatrix[0][0]+",  "+rotateteYMatrix[0][1]+",  "+rotateteYMatrix[0][2]+",  "+rotateteYMatrix[0][3]+"\n";
//        tekstlog = tekstlog + rotateteYMatrix[1][0]+",  "+rotateteYMatrix[1][1]+",  "+rotateteYMatrix[1][2]+",  "+rotateteYMatrix[1][3]+"\n";
//        tekstlog = tekstlog + rotateteYMatrix[2][0]+",  "+rotateteYMatrix[2][1]+",  "+rotateteYMatrix[2][2]+",  "+rotateteYMatrix[2][3]+"\n";
//        tekstlog = tekstlog + rotateteYMatrix[3][0]+",  "+rotateteYMatrix[3][1]+",  "+rotateteYMatrix[3][2]+",  "+rotateteYMatrix[3][3]+"\n";

//        String tekstlog =  rotateteZMatrix[0][0]+",  "+rotateteZMatrix[0][1]+",  "+rotateteZMatrix[0][2]+",  "+rotateteZMatrix[0][3]+"\n";
//        tekstlog = tekstlog + rotateteZMatrix[1][0]+",  "+rotateteZMatrix[1][1]+",  "+rotateteZMatrix[1][2]+",  "+rotateteZMatrix[1][3]+"\n";
//        tekstlog = tekstlog + rotateteZMatrix[2][0]+",  "+rotateteZMatrix[2][1]+",  "+rotateteZMatrix[2][2]+",  "+rotateteZMatrix[2][3]+"\n";
//        tekstlog = tekstlog + rotateteZMatrix[3][0]+",  "+rotateteZMatrix[3][1]+",  "+rotateteZMatrix[3][2]+",  "+rotateteZMatrix[3][3]+"\n";

//        String tekstlog =  multipleResult[0][0]+",  "+multipleResult[0][1]+",  "+multipleResult[0][2]+",  "+multipleResult[0][3]+"\n";
//        tekstlog = tekstlog + multipleResult[1][0]+",  "+multipleResult[1][1]+",  "+multipleResult[1][2]+",  "+multipleResult[1][3]+"\n";
//        tekstlog = tekstlog + multipleResult[2][0]+",  "+multipleResult[2][1]+",  "+multipleResult[2][2]+",  "+multipleResult[2][3]+"\n";
//        tekstlog = tekstlog + multipleResult[3][0]+",  "+multipleResult[3][1]+",  "+multipleResult[3][2]+",  "+multipleResult[3][3]+"\n";
//        jTextPaneLOG.setText(tekstlog);
        
        return multipleResult;
    }
    
    private void jSpinnerLODzoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLODzoomStateChanged
        try {
            startAppContent();
            updateMapImage(pathToOnlineMap());
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSpinnerLODzoomStateChanged

    private void jComboBoxMapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxMapItemStateChanged
        try {
            updateMapImage(pathToOnlineMap());
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxMapItemStateChanged

    private void jSpinnerRegionHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRegionHeightStateChanged
        try {
            CalculateTiileToDegreeAndRad();
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSpinnerRegionHeightStateChanged

    private void jSpinnerLODzoomPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinnerLODzoomPropertyChange
        try {
            startAppContent();
            CalculateTiileToDegreeAndRad();
            updateMapImage(pathToOnlineMap());
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSpinnerLODzoomPropertyChange

    private void jCheckBoxShowLinkToProviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowLinkToProviderActionPerformed
        try {
            CalculateTiileToDegreeAndRad();
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCheckBoxShowLinkToProviderActionPerformed

    private void jCheckBoxShowTMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowTMSActionPerformed
        try {
            CalculateTiileToDegreeAndRad();
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCheckBoxShowTMSActionPerformed

    private void jCheckBoxShow3DTilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShow3DTilesActionPerformed
        try {
            CalculateTiileToDegreeAndRad();
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCheckBoxShow3DTilesActionPerformed

    private void jSpinnerLatituteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLatituteStateChanged
        if(jRadioButtonDegrees.isSelected()){
            double siny;
            double y;
            siny = Math.sin(((double)jSpinnerLatitute.getValue()*Math.PI)/180);
            siny = Math.min(Math.max(siny, -0.9999), 0.9999);
            y = (int)jSpinnerTILE_SIZE.getValue()*(0.5 - (Math.log((1+siny)/(1-siny))/(4*Math.PI)));
            y= y* scale/(int)jSpinnerTILE_SIZE.getValue();
            y= Math.floor(y);
            jSpinnerTileLatY.setValue((int)y);
            calculateECEF();
            try {
                CalculateTiileToDegreeAndRad();
                updateMapImage(pathToOnlineMap());
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jSpinnerLatituteStateChanged

    private void jSpinnerLongdituteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLongdituteStateChanged
        if(jRadioButtonDegrees.isSelected()){
            double x; 
            x= (int)jSpinnerTILE_SIZE.getValue()*(0.5+(double)jSpinnerLongditute.getValue()/360);
            x = x*scale/(int)jSpinnerTILE_SIZE.getValue();
            x= Math.floor(x);
            //jTextPane1.setText(x+"");
            jSpinnerTileLngX.setValue((int)x);
            calculateECEF();
                        try {
                CalculateTiileToDegreeAndRad();
                updateMapImage(pathToOnlineMap());
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jSpinnerLongdituteStateChanged

    private void jRadioButtonDegreesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDegreesActionPerformed
        if(jRadioButtonDegrees.isSelected()){
            jRadioButtonTile.setSelected(false);
            jSpinnerTileLatY.setEnabled(false);
            jSpinnerTileLngX.setEnabled(false);
            jSpinnerLongditute.setEnabled(true);
            jSpinnerLatitute.setEnabled(true);
        }else{
           jRadioButtonTile.setSelected(true);            
           jSpinnerTileLatY.setEnabled(true);
            jSpinnerTileLngX.setEnabled(true);
            jSpinnerLongditute.setEnabled(false);
            jSpinnerLatitute.setEnabled(false);
           
        }
        
    }//GEN-LAST:event_jRadioButtonDegreesActionPerformed

    private void jRadioButtonTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTileActionPerformed

       if(jRadioButtonTile.isSelected()){
            jRadioButtonDegrees.setSelected(false);
            jSpinnerTileLatY.setEnabled(true);
            jSpinnerTileLngX.setEnabled(true);
            jSpinnerLongditute.setEnabled(false);
            jSpinnerLatitute.setEnabled(false);
        }else{
            jRadioButtonDegrees.setSelected(true);
            jSpinnerTileLatY.setEnabled(false);
            jSpinnerTileLngX.setEnabled(false);
            jSpinnerLongditute.setEnabled(true);
            jSpinnerLatitute.setEnabled(true);
        }
       
    }//GEN-LAST:event_jRadioButtonTileActionPerformed

    private void jSpinnerTileLngXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerTileLngXStateChanged
        if(jRadioButtonTile.isSelected()){
            try {
                CalculateTiileToDegreeAndRad();
                updateMapImage(pathToOnlineMap());
                jSpinnerLongditute.setValue(minXdegrees);
                
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jSpinnerTileLngXStateChanged

    private void jSpinnerTileLatYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerTileLatYStateChanged
        if(jRadioButtonTile.isSelected()){
            try {
                CalculateTiileToDegreeAndRad();
                updateMapImage(pathToOnlineMap());
                jSpinnerLatitute.setValue(minYdegrees);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jSpinnerTileLatYStateChanged

    private void jButtonTMScreatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTMScreatedActionPerformed
        try {
            String pathTMS = jTextFieldPathToBuliderMap.getText()+"/TMS";
            Files.createDirectories(Paths.get(pathTMS));
            
            String readMeString = "Generated Tile["+jSpinnerTileLngX.getValue()+","+jSpinnerTileLatY.getValue()+"]"+" with Scale: "+scale +
                    "\nTile provider for this Tile: "+ pathToOnlineMap()+
                    "\nMain Tile Image: "+(int)jSpinnerLODzoom.getValue()+"/"+(int)jSpinnerTileLngX.getValue()+"/"+((scale-1)- (int)jSpinnerTileLatY.getValue())+".png"+
                    "\nTMS link UE: "+ "file:///"+jTextFieldPathToBuliderMap.getText()+"/TMS/tilemapresource.xml";
            Files.createDirectories(Paths.get(pathTMS+"/"+(int)jSpinnerLODzoom.getValue()+"/"+(int)jSpinnerTileLngX.getValue()));
            
            if(Files.exists(Paths.get(pathTMS+"/tilemapresource.xml"),LinkOption.NOFOLLOW_LINKS)){
                Files.writeString(Paths.get(pathTMS+"/tilemapresource.xml"), TMSxmlFile, StandardOpenOption.TRUNCATE_EXISTING);
                
            }else{
                Files.writeString(Paths.get(pathTMS+"/tilemapresource.xml"), TMSxmlFile, StandardOpenOption.CREATE_NEW);
            }
            if(Files.exists(Paths.get(pathTMS+"/readme.txt"),LinkOption.NOFOLLOW_LINKS)){
                Files.writeString(Paths.get(pathTMS+"/readme.txt"), readMeString, StandardOpenOption.TRUNCATE_EXISTING);
                
            }else{
                Files.writeString(Paths.get(pathTMS+"/readme.txt"), readMeString, StandardOpenOption.CREATE_NEW);
            }
            //create catalog and clear png with aplha imag
            BufferedImage bi;
            if(jCheckBoxShowMap.isSelected()){
                bi = new BufferedImage(mapImage.getWidth(null), mapImage.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            }else{
                bi = new BufferedImage(256, 256, BufferedImage.TYPE_INT_ARGB);
            }
            
            for(int i=-1;i<=1;i++){
                if((((int)jSpinnerTileLngX.getValue()+i>=0) && ((int)jSpinnerTileLngX.getValue()+i)<=(scale-1))){
                    Files.createDirectories(Paths.get(pathTMS+"/"+(int)jSpinnerLODzoom.getValue()+"/"+(int)((int)jSpinnerTileLngX.getValue()+i) ));
                    for(int j=-1;j<=1;j++){
                        if((((int)jSpinnerTileLatY.getValue()+j>=0) && ((int)jSpinnerTileLatY.getValue()+j)<=(scale-1))){
                            File outputfileClearFile = new File(pathTMS+"/"+(int)jSpinnerLODzoom.getValue()+"/"+(int)((int)jSpinnerTileLngX.getValue()+i)+"/"+((scale-1)-(int)jSpinnerTileLatY.getValue()+j)+".png");
                            ImageIO.write(bi, "png", outputfileClearFile);
                        }     
                    }
                }         
            }
            
            // Draw the image on to the buffered image
            if(jCheckBoxShowMap.isSelected()){
                Graphics2D bGr = bi.createGraphics();
                bGr.drawImage(mapImage, 0, 0, null);
                bGr.dispose();
                File outputfile = new File(pathTMS+"/"+(int)jSpinnerLODzoom.getValue()+"/"+(int)jSpinnerTileLngX.getValue()+"/"+((scale-1)- (int)jSpinnerTileLatY.getValue())+".png");
                ImageIO.write(bi, "png", outputfile);
            }
            
            jTextPaneLOG.setText("TMS structure created in "+ pathTMS+" \n\n" + readMeString);
        } catch (IOException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonTMScreatedActionPerformed

    private void jSpinnerBorderBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerBorderBoxStateChanged
        try {
            CalculateTiileToDegreeAndRad();
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSpinnerBorderBoxStateChanged

    private void jButton3DTilesJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3DTilesJSONActionPerformed
        
        try {
            String path3DTiles = jTextFieldPathToBuliderMap.getText()+"/3DTile";
            Files.createDirectories(Paths.get(path3DTiles));
            
            String readMeString = "Generated Tile["+jSpinnerTileLngX.getValue()+","+jSpinnerTileLatY.getValue()+"]"+" with Scale: "+scale +
            "\nJSON link UE: "+ "file:///"+jTextFieldPathToBuliderMap.getText()+"/3DTiles/tileset.json";
            
            if(Files.exists(Paths.get(path3DTiles+"/readme.txt"),LinkOption.NOFOLLOW_LINKS)){
                Files.writeString(Paths.get(path3DTiles+"/readme.txt"), readMeString, StandardOpenOption.TRUNCATE_EXISTING);   
            }else{
                Files.writeString(Paths.get(path3DTiles+"/readme.txt"), readMeString, StandardOpenOption.CREATE_NEW);
            }
            if(Files.exists(Paths.get(path3DTiles+"/tileset.json"),LinkOption.NOFOLLOW_LINKS)){
                Files.writeString(Paths.get(path3DTiles+"/tileset.json"), tileset3DTilesJSON, StandardOpenOption.TRUNCATE_EXISTING);   
            }else{
                Files.writeString(Paths.get(path3DTiles+"/tileset.json"), tileset3DTilesJSON, StandardOpenOption.CREATE_NEW);
            }
            
            jTextPaneLOG.setText(jFileChooser1.getSelectedFile().toString());
                Files.copy(Paths.get(jFileChooser1.getSelectedFile().toString()), Paths.get(path3DTiles+"/"+fileName),StandardCopyOption.REPLACE_EXISTING);

            jTextPaneLOG.setText("Tileset structure json for model 3D created in "+ path3DTiles+" \n\n" + readMeString);
        } catch (IOException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3DTilesJSONActionPerformed

    private void jSpinnerElipsoidHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerElipsoidHeightStateChanged
        calculateECEF();
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_jSpinnerElipsoidHeightStateChanged

    private void jSpinnerGeometricError1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerGeometricError1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerGeometricError1StateChanged

    private void jCheckBoxShowMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowMapActionPerformed
        if(jCheckBoxShowMap.isSelected()){    
            try {
                CalculateTiileToDegreeAndRad();
                updateMapImage(pathToOnlineMap());
                jSpinnerLatitute.setValue(minYdegrees);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jCheckBoxShowMapActionPerformed

    private void jSpinnerPositionXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerPositionXStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerPositionXStateChanged

    private void jSpinnerPositionYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerPositionYStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerPositionYStateChanged

    private void jSpinnerPositionZStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerPositionZStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerPositionZStateChanged

    private void jSpinnerRotationXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRotationXStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerRotationXStateChanged

    private void jSpinnerRotationYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRotationYStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerRotationYStateChanged

    private void jSpinnerRotationZStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRotationZStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerRotationZStateChanged

    private void jSpinnerScaleXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScaleXStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerScaleXStateChanged

    private void jSpinnerScaleYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScaleYStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerScaleYStateChanged

    private void jSpinnerScaleZStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScaleZStateChanged
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jSpinnerScaleZStateChanged

    private void jCheckBoxNormalizeRotationModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNormalizeRotationModelActionPerformed
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jCheckBoxNormalizeRotationModelActionPerformed

    private void jComboBoxRefineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRefineActionPerformed
            try {
                CalculateTiileToDegreeAndRad();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jComboBoxRefineActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        fileName = jFileChooser1.getName(jFileChooser1.getSelectedFile());
        try {
            CalculateTiileToDegreeAndRad();
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3DTilesJSON;
    private javax.swing.JButton jButtonTMScreated;
    private javax.swing.JCheckBox jCheckBoxNormalizeRotationModel;
    private javax.swing.JCheckBox jCheckBoxShow3DTiles;
    private javax.swing.JCheckBox jCheckBoxShowLinkToProvider;
    private javax.swing.JCheckBox jCheckBoxShowMap;
    private javax.swing.JCheckBox jCheckBoxShowTMS;
    private javax.swing.JComboBox<String> jComboBoxMap;
    private javax.swing.JComboBox<String> jComboBoxRefine;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelBackgroundImage;
    private javax.swing.JLabel jLabelECEFx;
    private javax.swing.JLabel jLabelECEFy;
    private javax.swing.JLabel jLabelIncreaseBox;
    private javax.swing.JLabel jLabelLat;
    private javax.swing.JLabel jLabelLinkToGoogle;
    private javax.swing.JLabel jLabelLinkToGoogle2;
    private javax.swing.JLabel jLabelLinkToGoogle3;
    private javax.swing.JLabel jLabelMaxHeight;
    private javax.swing.JLabel jLabelMaxHeightECEFz;
    private javax.swing.JLabel jLabelModel;
    private javax.swing.JLabel jLabelModelPosition;
    private javax.swing.JLabel jLabelModelRotation;
    private javax.swing.JLabel jLabelModelScale;
    private javax.swing.JLabel jLabelPathToCreated;
    private javax.swing.JLabel jLabelRefine;
    private javax.swing.JLabel jLabelTileHeight;
    private javax.swing.JLabel jLabelTileLatX;
    private javax.swing.JLabel jLabelTileLatX1;
    private javax.swing.JLabel jLabelTileLatX2;
    private javax.swing.JLabel jLabelTileLngY;
    private javax.swing.JLabel jLabelTilesetJSON;
    private javax.swing.JLabel jLabelTng;
    private javax.swing.JLabel jLabelgeometricError;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelFileChoser;
    private javax.swing.JPanel jPanelFindeTile;
    private javax.swing.JPanel jPanelLatLng;
    private javax.swing.JPanel jPanelLatLngDeegrees;
    private javax.swing.JPanel jPanelLogCheckBox;
    private javax.swing.JPanel jPanelMap;
    private javax.swing.JPanel jPanelPathAndButton;
    private javax.swing.JPanel jPanelZoomTileSize;
    private javax.swing.JRadioButton jRadioButtonDegrees;
    private javax.swing.JRadioButton jRadioButtonTile;
    private javax.swing.JScrollPane jScrollPaneLog;
    private javax.swing.JSpinner jSpinnerBorderBox;
    private javax.swing.JSpinner jSpinnerECEFx;
    private javax.swing.JSpinner jSpinnerECEFy;
    private javax.swing.JSpinner jSpinnerECEFz;
    private javax.swing.JSpinner jSpinnerElipsoidHeight;
    private javax.swing.JSpinner jSpinnerGeometricError1;
    private javax.swing.JSpinner jSpinnerLODzoom;
    private javax.swing.JSpinner jSpinnerLatitute;
    private javax.swing.JSpinner jSpinnerLongditute;
    private javax.swing.JSpinner jSpinnerPositionX;
    private javax.swing.JSpinner jSpinnerPositionY;
    private javax.swing.JSpinner jSpinnerPositionZ;
    private javax.swing.JSpinner jSpinnerRegionHeight;
    private javax.swing.JSpinner jSpinnerRotationX;
    private javax.swing.JSpinner jSpinnerRotationY;
    private javax.swing.JSpinner jSpinnerRotationZ;
    private javax.swing.JSpinner jSpinnerScaleX;
    private javax.swing.JSpinner jSpinnerScaleY;
    private javax.swing.JSpinner jSpinnerScaleZ;
    private javax.swing.JSpinner jSpinnerTILE_SIZE;
    private javax.swing.JSpinner jSpinnerTileLatY;
    private javax.swing.JSpinner jSpinnerTileLngX;
    private javax.swing.JTextField jTextFieldPathToBuliderMap;
    private javax.swing.JTextPane jTextPaneLOG;
    // End of variables declaration//GEN-END:variables
}
